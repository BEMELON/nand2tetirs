// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //siganls

    //signal_ARegister
    Not(in=instruction[15], out=notInstruction15);
    And(a=instruction[15], b=instruction[5], out=s515);
    Or(a=notInstruction15, b=s515, out=loadARegister);

    //signal_AMMux
    And(a=instruction[15], b=instruction[12], out=selAMMux);

    //signal_DRegister
    And(a=instruction[15], b=instruction[4], out=loadDRegister);

    //signal_ALU
    And(a=instruction[11], b=instruction[15], out=zx);
    And(a=instruction[10], b=instruction[15], out=nx);
    And(a=instruction[9], b=instruction[15], out=zy);
    And(a=instruction[8], b=instruction[15], out=ny);
    And(a=instruction[7], b=instruction[15], out=f);
    And(a=instruction[6], b=instruction[15], out=no);

    //signal_PC
    Or(a=neg, b=zero, out=negOrZero);
    Not(in=negOrZero, out=pos);
    And(a=instruction[2], b=neg, out=j1);
    And(a=instruction[1], b=zero, out=j2);
    And(a=instruction[0], b=pos, out=j3);
    Or(a=j1, b=j2, out=j12);
    Or(a=j12, b=j3, out=j123);
    And(a=instruction[15], b=j123, out=loadPC);



    // Mux between ALUoutput/instruction
    Mux16(a=ALUoutput, b=instruction,  sel=notInstruction15, out=registerAInput);

    //A Register
    ARegister(in=registerAInput, load=loadARegister, out=outARegister, out[0..14]=addressM);

    //D Register
    DRegister(in=ALUoutput, load=loadDRegister, out=ALUX);

    // Mux between M/A
    Mux16(a=outARegister, b=inM, sel=selAMMux, out=ALUY);

    // ALU
    ALU(x=ALUX, y=ALUY, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUoutput, out=outM, zr=zero, ng=neg);

    //PC
    PC(in=outARegister, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    //writeM
    And(a=instruction[15], b=instruction[3], out=writeM);





}


